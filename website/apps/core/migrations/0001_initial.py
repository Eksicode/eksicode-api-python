# Generated by Django 2.2.6 on 2019-10-27 11:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(default='path_to_default_profile_photo', upload_to='')),
                ('reputation', models.IntegerField(default=0)),
                ('impact', models.IntegerField(default=0)),
                ('status', models.TextField(choices=[('NOT_APPROVED', 'Not Approved'), ('APPROVED', 'Approved'), ('BANNED', 'Banned'), ('SUSPENDED', 'Suspended'), ('ON_HOLIDAY', 'On Holiday')])),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TelegramGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('group_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user_count', models.IntegerField(default=0)),
                ('icon', models.ImageField(upload_to='')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('icon', models.ImageField(upload_to='')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_uuidtaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_uuidtaggeditem_items', to='taggit.Tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Vacancy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=200)),
                ('description', models.TextField()),
                ('city', models.TextField(blank=True, null=True)),
                ('country', models.CharField(choices=[('AFGHANISTAN', 'Afghanistan'), ('ALAND_ISLANDS', 'Aland Islands'), ('ALBANIA', 'Albania'), ('ALGERIA', 'Algeria'), ('AMERICAN_SAMOA', 'American Samoa'), ('ANDORRA', 'Andorra'), ('ANGOLA', 'Angola'), ('ANGUILLA', 'Anguilla'), ('ANTARCTICA', 'Antarctica'), ('ANTIGUA_AND_BARBUDA', 'Antigua and Barbuda'), ('ARGENTINA', 'Argentina'), ('ARMENIA', 'Armenia'), ('ARUBA', 'Aruba'), ('AUSTRALIA', 'Australia'), ('AUSTRIA', 'Austria'), ('AZERBAIJAN', 'Azerbaijan'), ('BAHAMAS', 'Bahamas'), ('BAHRAIN', 'Bahrain'), ('BANGLADESH', 'Bangladesh'), ('BARBADOS', 'Barbados'), ('BELARUS', 'Belarus'), ('BELGIUM', 'Belgium'), ('BELIZE', 'Belize'), ('BENIN', 'Benin'), ('BERMUDA', 'Bermuda'), ('BHUTAN', 'Bhutan'), ('BOLIVIA__PLURINATIONAL_STATE_OF', 'Bolivia, Plurinational State of'), ('BONAIRE__SINT_EUSTATIUS_AND_SABA', 'Bonaire, Sint Eustatius and Saba'), ('BOSNIA_AND_HERZEGOVINA', 'Bosnia and Herzegovina'), ('BOTSWANA', 'Botswana'), ('BOUVET_ISLAND', 'Bouvet Island'), ('BRAZIL', 'Brazil'), ('BRITISH_INDIAN_OCEAN_TERRITORY', 'British Indian Ocean Territory'), ('BRUNEI_DARUSSALAM', 'Brunei Darussalam'), ('BULGARIA', 'Bulgaria'), ('BURKINA_FASO', 'Burkina Faso'), ('BURUNDI', 'Burundi'), ('CAMBODIA', 'Cambodia'), ('CAMEROON', 'Cameroon'), ('CANADA', 'Canada'), ('CAPE_VERDE', 'Cape Verde'), ('CAYMAN_ISLANDS', 'Cayman Islands'), ('CENTRAL_AFRICAN_REPUBLIC', 'Central African Republic'), ('CHAD', 'Chad'), ('CHILE', 'Chile'), ('CHINA', 'China'), ('CHRISTMAS_ISLAND', 'Christmas Island'), ('COCOS__KEELING__ISLANDS', 'Cocos (Keeling) Islands'), ('COLOMBIA', 'Colombia'), ('COMOROS', 'Comoros'), ('CONGO', 'Congo'), ('CONGO__THE_DEMOCRATIC_REPUBLIC_OF_THE', 'Congo, the Democratic Republic of the'), ('COOK_ISLANDS', 'Cook Islands'), ('COSTA_RICA', 'Costa Rica'), ('COTE_D_IVOIRE', "Cote d'Ivoire"), ('CROATIA', 'Croatia'), ('CUBA', 'Cuba'), ('CURACAO', 'Curacao'), ('CYPRUS', 'Cyprus'), ('CZECH_REPUBLIC', 'Czech Republic'), ('DENMARK', 'Denmark'), ('DJIBOUTI', 'Djibouti'), ('DOMINICA', 'Dominica'), ('DOMINICAN_REPUBLIC', 'Dominican Republic'), ('ECUADOR', 'Ecuador'), ('EGYPT', 'Egypt'), ('EL_SALVADOR', 'El Salvador'), ('EQUATORIAL_GUINEA', 'Equatorial Guinea'), ('ERITREA', 'Eritrea'), ('ESTONIA', 'Estonia'), ('ETHIOPIA', 'Ethiopia'), ('FALKLAND_ISLANDS__MALVINAS_', 'Falkland Islands (Malvinas)'), ('FAROE_ISLANDS', 'Faroe Islands'), ('FIJI', 'Fiji'), ('FINLAND', 'Finland'), ('FRANCE', 'France'), ('FRENCH_GUIANA', 'French Guiana'), ('FRENCH_POLYNESIA', 'French Polynesia'), ('FRENCH_SOUTHERN_TERRITORIES', 'French Southern Territories'), ('GABON', 'Gabon'), ('GAMBIA', 'Gambia'), ('GEORGIA', 'Georgia'), ('GERMANY', 'Germany'), ('GHANA', 'Ghana'), ('GIBRALTAR', 'Gibraltar'), ('GREECE', 'Greece'), ('GREENLAND', 'Greenland'), ('GRENADA', 'Grenada'), ('GUADELOUPE', 'Guadeloupe'), ('GUAM', 'Guam'), ('GUATEMALA', 'Guatemala'), ('GUERNSEY', 'Guernsey'), ('GUINEA', 'Guinea'), ('GUINEA_BISSAU', 'Guinea-Bissau'), ('GUYANA', 'Guyana'), ('HAITI', 'Haiti'), ('HEARD_ISLAND_AND_MCDONALD_ISLANDS', 'Heard Island and McDonald Islands'), ('HOLY_SEE__VATICAN_CITY_STATE_', 'Holy See (Vatican City State)'), ('HONDURAS', 'Honduras'), ('HONG_KONG', 'Hong Kong'), ('HUNGARY', 'Hungary'), ('ICELAND', 'Iceland'), ('INDIA', 'India'), ('INDONESIA', 'Indonesia'), ('IRAN__ISLAMIC_REPUBLIC_OF', 'Iran, Islamic Republic of'), ('IRAQ', 'Iraq'), ('IRELAND', 'Ireland'), ('ISLE_OF_MAN', 'Isle of Man'), ('ISRAEL', 'Israel'), ('ITALY', 'Italy'), ('JAMAICA', 'Jamaica'), ('JAPAN', 'Japan'), ('JERSEY', 'Jersey'), ('JORDAN', 'Jordan'), ('KAZAKHSTAN', 'Kazakhstan'), ('KENYA', 'Kenya'), ('KIRIBATI', 'Kiribati'), ('KOREA__DEMOCRATIC_PEOPLE_S_REPUBLIC_OF', "Korea, Democratic People's Republic of"), ('KOREA__REPUBLIC_OF', 'Korea, Republic of'), ('KUWAIT', 'Kuwait'), ('KYRGYZSTAN', 'Kyrgyzstan'), ('LAO_PEOPLE_S_DEMOCRATIC_REPUBLIC', "Lao People's Democratic Republic"), ('LATVIA', 'Latvia'), ('LEBANON', 'Lebanon'), ('LESOTHO', 'Lesotho'), ('LIBERIA', 'Liberia'), ('LIBYA', 'Libya'), ('LIECHTENSTEIN', 'Liechtenstein'), ('LITHUANIA', 'Lithuania'), ('LUXEMBOURG', 'Luxembourg'), ('MACAO', 'Macao'), ('MACEDONIA__THE_FORMER_YUGOSLAV_REPUBLIC_OF', 'Macedonia, the former Yugoslav Republic of'), ('MADAGASCAR', 'Madagascar'), ('MALAWI', 'Malawi'), ('MALAYSIA', 'Malaysia'), ('MALDIVES', 'Maldives'), ('MALI', 'Mali'), ('MALTA', 'Malta'), ('MARSHALL_ISLANDS', 'Marshall Islands'), ('MARTINIQUE', 'Martinique'), ('MAURITANIA', 'Mauritania'), ('MAURITIUS', 'Mauritius'), ('MAYOTTE', 'Mayotte'), ('MEXICO', 'Mexico'), ('MICRONESIA__FEDERATED_STATES_OF', 'Micronesia, Federated States of'), ('MOLDOVA__REPUBLIC_OF', 'Moldova, Republic of'), ('MONACO', 'Monaco'), ('MONGOLIA', 'Mongolia'), ('MONTENEGRO', 'Montenegro'), ('MONTSERRAT', 'Montserrat'), ('MOROCCO', 'Morocco'), ('MOZAMBIQUE', 'Mozambique'), ('MYANMAR', 'Myanmar'), ('NAMIBIA', 'Namibia'), ('NAURU', 'Nauru'), ('NEPAL', 'Nepal'), ('NETHERLANDS', 'Netherlands'), ('NEW_CALEDONIA', 'New Caledonia'), ('NEW_ZEALAND', 'New Zealand'), ('NICARAGUA', 'Nicaragua'), ('NIGER', 'Niger'), ('NIGERIA', 'Nigeria'), ('NIUE', 'Niue'), ('NORFOLK_ISLAND', 'Norfolk Island'), ('NORTHERN_MARIANA_ISLANDS', 'Northern Mariana Islands'), ('NORWAY', 'Norway'), ('OMAN', 'Oman'), ('PAKISTAN', 'Pakistan'), ('PALAU', 'Palau'), ('PALESTINE__STATE_OF', 'Palestine, State of'), ('PANAMA', 'Panama'), ('PAPUA_NEW_GUINEA', 'Papua New Guinea'), ('PARAGUAY', 'Paraguay'), ('PERU', 'Peru'), ('PHILIPPINES', 'Philippines'), ('PITCAIRN', 'Pitcairn'), ('POLAND', 'Poland'), ('PORTUGAL', 'Portugal'), ('PUERTO_RICO', 'Puerto Rico'), ('QATAR', 'Qatar'), ('REUNION', 'Reunion'), ('ROMANIA', 'Romania'), ('RUSSIAN_FEDERATION', 'Russian Federation'), ('RWANDA', 'Rwanda'), ('SAINT_BARTHELEMY', 'Saint Barthelemy'), ('SAINT_HELENA__ASCENSION_AND_TRISTAN_DA_CUNHA', 'Saint Helena, Ascension and Tristan da Cunha'), ('SAINT_KITTS_AND_NEVIS', 'Saint Kitts and Nevis'), ('SAINT_LUCIA', 'Saint Lucia'), ('SAINT_MARTIN__FRENCH_PART_', 'Saint Martin (French part)'), ('SAINT_PIERRE_AND_MIQUELON', 'Saint Pierre and Miquelon'), ('SAINT_VINCENT_AND_THE_GRENADINES', 'Saint Vincent and the Grenadines'), ('SAMOA', 'Samoa'), ('SAN_MARINO', 'San Marino'), ('SAO_TOME_AND_PRINCIPE', 'Sao Tome and Principe'), ('SAUDI_ARABIA', 'Saudi Arabia'), ('SENEGAL', 'Senegal'), ('SERBIA', 'Serbia'), ('SEYCHELLES', 'Seychelles'), ('SIERRA_LEONE', 'Sierra Leone'), ('SINGAPORE', 'Singapore'), ('SINT_MAARTEN__DUTCH_PART_', 'Sint Maarten (Dutch part)'), ('SLOVAKIA', 'Slovakia'), ('SLOVENIA', 'Slovenia'), ('SOLOMON_ISLANDS', 'Solomon Islands'), ('SOMALIA', 'Somalia'), ('SOUTH_AFRICA', 'South Africa'), ('SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS', 'South Georgia and the South Sandwich Islands'), ('SOUTH_SUDAN', 'South Sudan'), ('SPAIN', 'Spain'), ('SRI_LANKA', 'Sri Lanka'), ('SUDAN', 'Sudan'), ('SURINAME', 'Suriname'), ('SVALBARD_AND_JAN_MAYEN', 'Svalbard and Jan Mayen'), ('SWAZILAND', 'Swaziland'), ('SWEDEN', 'Sweden'), ('SWITZERLAND', 'Switzerland'), ('SYRIAN_ARAB_REPUBLIC', 'Syrian Arab Republic'), ('TAIWAN__PROVINCE_OF_CHINA', 'Taiwan, Province of China'), ('TAJIKISTAN', 'Tajikistan'), ('TANZANIA__UNITED_REPUBLIC_OF', 'Tanzania, United Republic of'), ('THAILAND', 'Thailand'), ('TIMOR_LESTE', 'Timor-Leste'), ('TOGO', 'Togo'), ('TOKELAU', 'Tokelau'), ('TONGA', 'Tonga'), ('TRINIDAD_AND_TOBAGO', 'Trinidad and Tobago'), ('TUNISIA', 'Tunisia'), ('TURKEY', 'Turkey'), ('TURKMENISTAN', 'Turkmenistan'), ('TURKS_AND_CAICOS_ISLANDS', 'Turks and Caicos Islands'), ('TUVALU', 'Tuvalu'), ('UGANDA', 'Uganda'), ('UKRAINE', 'Ukraine'), ('UNITED_ARAB_EMIRATES', 'United Arab Emirates'), ('UNITED_KINGDOM', 'United Kingdom'), ('UNITED_STATES', 'United States'), ('UNITED_STATES_MINOR_OUTLYING_ISLANDS', 'United States Minor Outlying Islands'), ('URUGUAY', 'Uruguay'), ('UZBEKISTAN', 'Uzbekistan'), ('VANUATU', 'Vanuatu'), ('VENEZUELA__BOLIVARIAN_REPUBLIC_OF', 'Venezuela, Bolivarian Republic of'), ('VIET_NAM', 'Viet Nam'), ('VIRGIN_ISLANDS__BRITISH', 'Virgin Islands, British'), ('VIRGIN_ISLANDS__U_S_', 'Virgin Islands, U.S.'), ('WALLIS_AND_FUTUNA', 'Wallis and Futuna'), ('WESTERN_SAHARA', 'Western Sahara'), ('YEMEN', 'Yemen'), ('ZAMBIA', 'Zambia'), ('ZIMBABWE', 'Zimbabwe')], max_length=100)),
                ('contact_person', models.TextField(blank=True, null=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='core.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrafficMeta',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('os', models.CharField(default='UNKNOWN', max_length=100)),
                ('browser', models.CharField(default='UNKNOWN', max_length=100)),
                ('device', models.CharField(default='UNKNOWN', max_length=100)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('commenter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.TextField()),
                ('link', models.URLField()),
                ('approved', models.BooleanField()),
                ('comments', models.ManyToManyField(to='core.ResourceComment')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='core.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalVacancy',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=200)),
                ('description', models.TextField()),
                ('city', models.TextField(blank=True, null=True)),
                ('country', models.CharField(choices=[('AFGHANISTAN', 'Afghanistan'), ('ALAND_ISLANDS', 'Aland Islands'), ('ALBANIA', 'Albania'), ('ALGERIA', 'Algeria'), ('AMERICAN_SAMOA', 'American Samoa'), ('ANDORRA', 'Andorra'), ('ANGOLA', 'Angola'), ('ANGUILLA', 'Anguilla'), ('ANTARCTICA', 'Antarctica'), ('ANTIGUA_AND_BARBUDA', 'Antigua and Barbuda'), ('ARGENTINA', 'Argentina'), ('ARMENIA', 'Armenia'), ('ARUBA', 'Aruba'), ('AUSTRALIA', 'Australia'), ('AUSTRIA', 'Austria'), ('AZERBAIJAN', 'Azerbaijan'), ('BAHAMAS', 'Bahamas'), ('BAHRAIN', 'Bahrain'), ('BANGLADESH', 'Bangladesh'), ('BARBADOS', 'Barbados'), ('BELARUS', 'Belarus'), ('BELGIUM', 'Belgium'), ('BELIZE', 'Belize'), ('BENIN', 'Benin'), ('BERMUDA', 'Bermuda'), ('BHUTAN', 'Bhutan'), ('BOLIVIA__PLURINATIONAL_STATE_OF', 'Bolivia, Plurinational State of'), ('BONAIRE__SINT_EUSTATIUS_AND_SABA', 'Bonaire, Sint Eustatius and Saba'), ('BOSNIA_AND_HERZEGOVINA', 'Bosnia and Herzegovina'), ('BOTSWANA', 'Botswana'), ('BOUVET_ISLAND', 'Bouvet Island'), ('BRAZIL', 'Brazil'), ('BRITISH_INDIAN_OCEAN_TERRITORY', 'British Indian Ocean Territory'), ('BRUNEI_DARUSSALAM', 'Brunei Darussalam'), ('BULGARIA', 'Bulgaria'), ('BURKINA_FASO', 'Burkina Faso'), ('BURUNDI', 'Burundi'), ('CAMBODIA', 'Cambodia'), ('CAMEROON', 'Cameroon'), ('CANADA', 'Canada'), ('CAPE_VERDE', 'Cape Verde'), ('CAYMAN_ISLANDS', 'Cayman Islands'), ('CENTRAL_AFRICAN_REPUBLIC', 'Central African Republic'), ('CHAD', 'Chad'), ('CHILE', 'Chile'), ('CHINA', 'China'), ('CHRISTMAS_ISLAND', 'Christmas Island'), ('COCOS__KEELING__ISLANDS', 'Cocos (Keeling) Islands'), ('COLOMBIA', 'Colombia'), ('COMOROS', 'Comoros'), ('CONGO', 'Congo'), ('CONGO__THE_DEMOCRATIC_REPUBLIC_OF_THE', 'Congo, the Democratic Republic of the'), ('COOK_ISLANDS', 'Cook Islands'), ('COSTA_RICA', 'Costa Rica'), ('COTE_D_IVOIRE', "Cote d'Ivoire"), ('CROATIA', 'Croatia'), ('CUBA', 'Cuba'), ('CURACAO', 'Curacao'), ('CYPRUS', 'Cyprus'), ('CZECH_REPUBLIC', 'Czech Republic'), ('DENMARK', 'Denmark'), ('DJIBOUTI', 'Djibouti'), ('DOMINICA', 'Dominica'), ('DOMINICAN_REPUBLIC', 'Dominican Republic'), ('ECUADOR', 'Ecuador'), ('EGYPT', 'Egypt'), ('EL_SALVADOR', 'El Salvador'), ('EQUATORIAL_GUINEA', 'Equatorial Guinea'), ('ERITREA', 'Eritrea'), ('ESTONIA', 'Estonia'), ('ETHIOPIA', 'Ethiopia'), ('FALKLAND_ISLANDS__MALVINAS_', 'Falkland Islands (Malvinas)'), ('FAROE_ISLANDS', 'Faroe Islands'), ('FIJI', 'Fiji'), ('FINLAND', 'Finland'), ('FRANCE', 'France'), ('FRENCH_GUIANA', 'French Guiana'), ('FRENCH_POLYNESIA', 'French Polynesia'), ('FRENCH_SOUTHERN_TERRITORIES', 'French Southern Territories'), ('GABON', 'Gabon'), ('GAMBIA', 'Gambia'), ('GEORGIA', 'Georgia'), ('GERMANY', 'Germany'), ('GHANA', 'Ghana'), ('GIBRALTAR', 'Gibraltar'), ('GREECE', 'Greece'), ('GREENLAND', 'Greenland'), ('GRENADA', 'Grenada'), ('GUADELOUPE', 'Guadeloupe'), ('GUAM', 'Guam'), ('GUATEMALA', 'Guatemala'), ('GUERNSEY', 'Guernsey'), ('GUINEA', 'Guinea'), ('GUINEA_BISSAU', 'Guinea-Bissau'), ('GUYANA', 'Guyana'), ('HAITI', 'Haiti'), ('HEARD_ISLAND_AND_MCDONALD_ISLANDS', 'Heard Island and McDonald Islands'), ('HOLY_SEE__VATICAN_CITY_STATE_', 'Holy See (Vatican City State)'), ('HONDURAS', 'Honduras'), ('HONG_KONG', 'Hong Kong'), ('HUNGARY', 'Hungary'), ('ICELAND', 'Iceland'), ('INDIA', 'India'), ('INDONESIA', 'Indonesia'), ('IRAN__ISLAMIC_REPUBLIC_OF', 'Iran, Islamic Republic of'), ('IRAQ', 'Iraq'), ('IRELAND', 'Ireland'), ('ISLE_OF_MAN', 'Isle of Man'), ('ISRAEL', 'Israel'), ('ITALY', 'Italy'), ('JAMAICA', 'Jamaica'), ('JAPAN', 'Japan'), ('JERSEY', 'Jersey'), ('JORDAN', 'Jordan'), ('KAZAKHSTAN', 'Kazakhstan'), ('KENYA', 'Kenya'), ('KIRIBATI', 'Kiribati'), ('KOREA__DEMOCRATIC_PEOPLE_S_REPUBLIC_OF', "Korea, Democratic People's Republic of"), ('KOREA__REPUBLIC_OF', 'Korea, Republic of'), ('KUWAIT', 'Kuwait'), ('KYRGYZSTAN', 'Kyrgyzstan'), ('LAO_PEOPLE_S_DEMOCRATIC_REPUBLIC', "Lao People's Democratic Republic"), ('LATVIA', 'Latvia'), ('LEBANON', 'Lebanon'), ('LESOTHO', 'Lesotho'), ('LIBERIA', 'Liberia'), ('LIBYA', 'Libya'), ('LIECHTENSTEIN', 'Liechtenstein'), ('LITHUANIA', 'Lithuania'), ('LUXEMBOURG', 'Luxembourg'), ('MACAO', 'Macao'), ('MACEDONIA__THE_FORMER_YUGOSLAV_REPUBLIC_OF', 'Macedonia, the former Yugoslav Republic of'), ('MADAGASCAR', 'Madagascar'), ('MALAWI', 'Malawi'), ('MALAYSIA', 'Malaysia'), ('MALDIVES', 'Maldives'), ('MALI', 'Mali'), ('MALTA', 'Malta'), ('MARSHALL_ISLANDS', 'Marshall Islands'), ('MARTINIQUE', 'Martinique'), ('MAURITANIA', 'Mauritania'), ('MAURITIUS', 'Mauritius'), ('MAYOTTE', 'Mayotte'), ('MEXICO', 'Mexico'), ('MICRONESIA__FEDERATED_STATES_OF', 'Micronesia, Federated States of'), ('MOLDOVA__REPUBLIC_OF', 'Moldova, Republic of'), ('MONACO', 'Monaco'), ('MONGOLIA', 'Mongolia'), ('MONTENEGRO', 'Montenegro'), ('MONTSERRAT', 'Montserrat'), ('MOROCCO', 'Morocco'), ('MOZAMBIQUE', 'Mozambique'), ('MYANMAR', 'Myanmar'), ('NAMIBIA', 'Namibia'), ('NAURU', 'Nauru'), ('NEPAL', 'Nepal'), ('NETHERLANDS', 'Netherlands'), ('NEW_CALEDONIA', 'New Caledonia'), ('NEW_ZEALAND', 'New Zealand'), ('NICARAGUA', 'Nicaragua'), ('NIGER', 'Niger'), ('NIGERIA', 'Nigeria'), ('NIUE', 'Niue'), ('NORFOLK_ISLAND', 'Norfolk Island'), ('NORTHERN_MARIANA_ISLANDS', 'Northern Mariana Islands'), ('NORWAY', 'Norway'), ('OMAN', 'Oman'), ('PAKISTAN', 'Pakistan'), ('PALAU', 'Palau'), ('PALESTINE__STATE_OF', 'Palestine, State of'), ('PANAMA', 'Panama'), ('PAPUA_NEW_GUINEA', 'Papua New Guinea'), ('PARAGUAY', 'Paraguay'), ('PERU', 'Peru'), ('PHILIPPINES', 'Philippines'), ('PITCAIRN', 'Pitcairn'), ('POLAND', 'Poland'), ('PORTUGAL', 'Portugal'), ('PUERTO_RICO', 'Puerto Rico'), ('QATAR', 'Qatar'), ('REUNION', 'Reunion'), ('ROMANIA', 'Romania'), ('RUSSIAN_FEDERATION', 'Russian Federation'), ('RWANDA', 'Rwanda'), ('SAINT_BARTHELEMY', 'Saint Barthelemy'), ('SAINT_HELENA__ASCENSION_AND_TRISTAN_DA_CUNHA', 'Saint Helena, Ascension and Tristan da Cunha'), ('SAINT_KITTS_AND_NEVIS', 'Saint Kitts and Nevis'), ('SAINT_LUCIA', 'Saint Lucia'), ('SAINT_MARTIN__FRENCH_PART_', 'Saint Martin (French part)'), ('SAINT_PIERRE_AND_MIQUELON', 'Saint Pierre and Miquelon'), ('SAINT_VINCENT_AND_THE_GRENADINES', 'Saint Vincent and the Grenadines'), ('SAMOA', 'Samoa'), ('SAN_MARINO', 'San Marino'), ('SAO_TOME_AND_PRINCIPE', 'Sao Tome and Principe'), ('SAUDI_ARABIA', 'Saudi Arabia'), ('SENEGAL', 'Senegal'), ('SERBIA', 'Serbia'), ('SEYCHELLES', 'Seychelles'), ('SIERRA_LEONE', 'Sierra Leone'), ('SINGAPORE', 'Singapore'), ('SINT_MAARTEN__DUTCH_PART_', 'Sint Maarten (Dutch part)'), ('SLOVAKIA', 'Slovakia'), ('SLOVENIA', 'Slovenia'), ('SOLOMON_ISLANDS', 'Solomon Islands'), ('SOMALIA', 'Somalia'), ('SOUTH_AFRICA', 'South Africa'), ('SOUTH_GEORGIA_AND_THE_SOUTH_SANDWICH_ISLANDS', 'South Georgia and the South Sandwich Islands'), ('SOUTH_SUDAN', 'South Sudan'), ('SPAIN', 'Spain'), ('SRI_LANKA', 'Sri Lanka'), ('SUDAN', 'Sudan'), ('SURINAME', 'Suriname'), ('SVALBARD_AND_JAN_MAYEN', 'Svalbard and Jan Mayen'), ('SWAZILAND', 'Swaziland'), ('SWEDEN', 'Sweden'), ('SWITZERLAND', 'Switzerland'), ('SYRIAN_ARAB_REPUBLIC', 'Syrian Arab Republic'), ('TAIWAN__PROVINCE_OF_CHINA', 'Taiwan, Province of China'), ('TAJIKISTAN', 'Tajikistan'), ('TANZANIA__UNITED_REPUBLIC_OF', 'Tanzania, United Republic of'), ('THAILAND', 'Thailand'), ('TIMOR_LESTE', 'Timor-Leste'), ('TOGO', 'Togo'), ('TOKELAU', 'Tokelau'), ('TONGA', 'Tonga'), ('TRINIDAD_AND_TOBAGO', 'Trinidad and Tobago'), ('TUNISIA', 'Tunisia'), ('TURKEY', 'Turkey'), ('TURKMENISTAN', 'Turkmenistan'), ('TURKS_AND_CAICOS_ISLANDS', 'Turks and Caicos Islands'), ('TUVALU', 'Tuvalu'), ('UGANDA', 'Uganda'), ('UKRAINE', 'Ukraine'), ('UNITED_ARAB_EMIRATES', 'United Arab Emirates'), ('UNITED_KINGDOM', 'United Kingdom'), ('UNITED_STATES', 'United States'), ('UNITED_STATES_MINOR_OUTLYING_ISLANDS', 'United States Minor Outlying Islands'), ('URUGUAY', 'Uruguay'), ('UZBEKISTAN', 'Uzbekistan'), ('VANUATU', 'Vanuatu'), ('VENEZUELA__BOLIVARIAN_REPUBLIC_OF', 'Venezuela, Bolivarian Republic of'), ('VIET_NAM', 'Viet Nam'), ('VIRGIN_ISLANDS__BRITISH', 'Virgin Islands, British'), ('VIRGIN_ISLANDS__U_S_', 'Virgin Islands, U.S.'), ('WALLIS_AND_FUTUNA', 'Wallis and Futuna'), ('WESTERN_SAHARA', 'Western Sahara'), ('YEMEN', 'Yemen'), ('ZAMBIA', 'Zambia'), ('ZIMBABWE', 'Zimbabwe')], max_length=100)),
                ('contact_person', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical vacancy',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUserBadge',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=100)),
                ('icon', models.TextField(max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user badge',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.TextField(default='path_to_default_profile_photo', max_length=100)),
                ('reputation', models.IntegerField(default=0)),
                ('impact', models.IntegerField(default=0)),
                ('status', models.TextField(choices=[('NOT_APPROVED', 'Not Approved'), ('APPROVED', 'Approved'), ('BANNED', 'Banned'), ('SUSPENDED', 'Suspended'), ('ON_HOLIDAY', 'On Holiday')])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTrafficMeta',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('os', models.CharField(default='UNKNOWN', max_length=100)),
                ('browser', models.CharField(default='UNKNOWN', max_length=100)),
                ('device', models.CharField(default='UNKNOWN', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical traffic meta',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTelegramGroup',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=100)),
                ('group_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user_count', models.IntegerField(default=0)),
                ('icon', models.TextField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical telegram group',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalResourceComment',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('commenter', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical resource comment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalResource',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.TextField()),
                ('link', models.URLField()),
                ('approved', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical resource',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='user',
            name='badges',
            field=models.ManyToManyField(to='core.UserBadge'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
